"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/calculations.js":
/*!***********************************!*\
  !*** ./src/utils/calculations.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateBlowerCapacity: function() { return /* binding */ calculateBlowerCapacity; },\n/* harmony export */   calculateDiffuserCourseCapacity: function() { return /* binding */ calculateDiffuserCourseCapacity; },\n/* harmony export */   calculateDiffuserFineCapacity: function() { return /* binding */ calculateDiffuserFineCapacity; },\n/* harmony export */   calculateEquivalentTank: function() { return /* binding */ calculateEquivalentTank; },\n/* harmony export */   calculateFlowMeterSize: function() { return /* binding */ calculateFlowMeterSize; },\n/* harmony export */   calculateFlowRate: function() { return /* binding */ calculateFlowRate; },\n/* harmony export */   calculateMBBRMedia: function() { return /* binding */ calculateMBBRMedia; },\n/* harmony export */   calculateMBBRTankVolume: function() { return /* binding */ calculateMBBRTankVolume; },\n/* harmony export */   calculateMGFCapacity: function() { return /* binding */ calculateMGFCapacity; },\n/* harmony export */   calculateMGFDiameter: function() { return /* binding */ calculateMGFDiameter; },\n/* harmony export */   calculateNitrogenRemoval: function() { return /* binding */ calculateNitrogenRemoval; },\n/* harmony export */   calculateSludgeHoldingTank: function() { return /* binding */ calculateSludgeHoldingTank; },\n/* harmony export */   calculateTotalCost: function() { return /* binding */ calculateTotalCost; },\n/* harmony export */   calculationOzonatorFlowRate: function() { return /* binding */ calculationOzonatorFlowRate; },\n/* harmony export */   calculationTubeDeckMediaNumber: function() { return /* binding */ calculationTubeDeckMediaNumber; },\n/* harmony export */   calculationUVSystemFlowRate: function() { return /* binding */ calculationUVSystemFlowRate; },\n/* harmony export */   calculationUltraFiltrationSystemFlowRate: function() { return /* binding */ calculationUltraFiltrationSystemFlowRate; },\n/* harmony export */   updateDynamicCapacities: function() { return /* binding */ updateDynamicCapacities; }\n/* harmony export */ });\n// Helper function to ensure a number is not NaN, replacing with 0 if it is\nconst ensureNumber = (value)=>isNaN(value) ? 0 : value;\nfunction calculateTotalCost(equipmentData) {\n    return Object.values(equipmentData).reduce((total, equipment)=>total + equipment.totalPrice, 0);\n}\nfunction calculateFlowRate(plantCapacity) {\n    return plantCapacity / 20;\n}\nfunction calculateEquivalentTank(flowRate) {\n    return flowRate * 8;\n}\nfunction calculateMBBRTankVolume(BOD, plantCapacity) {\n    let depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 4;\n    return BOD / 1000 * plantCapacity * 2.5 / 0.89;\n}\nfunction calculateNitrogenRemoval(Nitrogen, plantCapacity) {\n    let depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 4;\n    return Nitrogen / 1000 * plantCapacity * 4.3 / 0.89;\n}\nfunction calculateSludgeHoldingTank(plantCapacity, BOD, TSS) {\n    const sludgeHolder = plantCapacity * (BOD * 0.15 + TSS * 0.6) / 100000;\n    return sludgeHolder * 4;\n}\nfunction calculateMBBRMedia(BOD, plantCapacity) {\n    return BOD * plantCapacity / 4000;\n}\nfunction calculateBlowerCapacity(equivalentTank, MBBRTankVolume, nitrogenRemoval, sludgeHoldingTank) {\n    return equivalentTank * 0.6 + MBBRTankVolume + nitrogenRemoval + sludgeHoldingTank * 0.6;\n}\nfunction calculateDiffuserCourseCapacity(equivalentTank, sludgeHoldingTank) {\n    return equivalentTank * 0.6 / 3 + sludgeHoldingTank * 0.6 / 3;\n}\nfunction calculateDiffuserFineCapacity(MBBRTankVolume, nitrogenRemoval) {\n    return (MBBRTankVolume + nitrogenRemoval) / 5;\n}\nfunction calculateMGFCapacity(plantCapacity) {\n    return plantCapacity / (16 * 12);\n}\nfunction calculateMGFDiameter(mgfCapacity) {\n    return Math.sqrt(mgfCapacity * 4 / Math.PI) * 1000; // Multiply the result by 1000\n}\nfunction calculateFlowMeterSize(waterFlowRate) {\n    return Math.sqrt(waterFlowRate * 4 / (3600 * 1.5 * 3.14)) * 1000;\n}\nfunction calculationUVSystemFlowRate(plantCapacity) {\n    return plantCapacity / 20;\n}\nfunction calculationOzonatorFlowRate(plantCapacity) {\n    return plantCapacity * 5 / 20;\n}\nfunction calculationUltraFiltrationSystemFlowRate(plantCapacity) {\n    return plantCapacity / 20;\n}\nfunction calculationTubeDeckMediaNumber(plantCapacity) {\n    return plantCapacity * 22.5;\n}\nfunction updateDynamicCapacities(plantData, equipmentData) {\n    const updatedEquipmentData = {\n        ...equipmentData\n    };\n    const flowRate = calculateFlowRate(plantData.capacity);\n    const equivalentTank = calculateEquivalentTank(flowRate);\n    const MBBRTankVolume = calculateMBBRTankVolume(plantData.BOD, plantData.capacity, 4);\n    const nitrogenRemoval = calculateNitrogenRemoval(plantData.Nitrogen, plantData.capacity, 4);\n    const sludgeHoldingTank = calculateSludgeHoldingTank(plantData.capacity, plantData.BOD, plantData.TSS);\n    const MBBRMedia = calculateMBBRMedia(plantData.BOD, plantData.capacity);\n    const blowerCapacity = calculateBlowerCapacity(equivalentTank, MBBRTankVolume, nitrogenRemoval, sludgeHoldingTank);\n    const diffuserCourseCapacity = calculateDiffuserCourseCapacity(equivalentTank, sludgeHoldingTank);\n    const diffuserFineCapacity = calculateDiffuserFineCapacity(MBBRTankVolume, nitrogenRemoval);\n    const mgfCapacity = calculateMGFCapacity(plantData.capacity);\n    const mgfDiameter = calculateMGFDiameter(mgfCapacity);\n    const UVSystemFlow = calculationUVSystemFlowRate(plantData.capacity);\n    const OzonatorFlow = calculationOzonatorFlowRate(plantData.capacity);\n    const UltraFiltrationSystemFlow = calculationUltraFiltrationSystemFlowRate(plantData.capacity);\n    const TubeDeck = calculationTubeDeckMediaNumber(plantData.capacity);\n    const flowMeterSize = calculateFlowMeterSize(flowRate);\n    if (updatedEquipmentData[\"raw-sewage\"]) updatedEquipmentData[\"raw-sewage\"].capacity = flowRate;\n    if (updatedEquipmentData[\"sludge-pump\"]) updatedEquipmentData[\"sludge-pump\"].capacity = flowRate;\n    if (updatedEquipmentData[\"filter-pump\"]) updatedEquipmentData[\"filter-pump\"].capacity = plantData.capacity / 16;\n    if (updatedEquipmentData.blower) updatedEquipmentData.blower.capacity = blowerCapacity;\n    if (updatedEquipmentData[\"mbbr-media\"]) updatedEquipmentData[\"mbbr-media\"].Volume = MBBRMedia;\n    if (updatedEquipmentData[\"diffuser-course\"]) updatedEquipmentData[\"diffuser-course\"].Piece = diffuserCoursePiece;\n    if (updatedEquipmentData[\"diffuser-fine\"]) updatedEquipmentData[\"diffuser-fine\"].Piece = diffuserFinePiece;\n    if (updatedEquipmentData[\"multi-grade-filter\"]) updatedEquipmentData[\"multi-grade-filter\"].diameter.Height = mgfDiameterHeight;\n    if (updatedEquipmentData[\"uv-system\"]) updatedEquipmentData[\"uv-system\"].Flow = UVSystemFlow;\n    if (updatedEquipmentData[\"Ozonator\"]) updatedEquipmentData[\"Ozonator\"].Flow = OzonatorFlow;\n    if (updatedEquipmentData[\"ultra-filtration\"]) updatedEquipmentData[\"ultra-filtration\"].Flow = UltraFiltrationSystemFlow;\n    if (updatedEquipmentData[\"tube-media\"]) updatedEquipmentData[\"tube-media\"].capacity = TubeDeck;\n    if (updatedEquipmentData[\"flow-meter\"]) updatedEquipmentData[\"flow-meter\"].size = flowMeterSize;\n    Object.keys(updatedEquipmentData).forEach((key)=>{\n        const equipment = updatedEquipmentData[key];\n        if (equipment.capacity !== undefined) {\n            const capacityCost = ensureNumber(equipment.costPerCapacity) * ensureNumber(equipment.quantity);\n            equipment.totalPrice = Math.max(ensureNumber(equipment.capacity), 1) * capacityCost;\n            // Add additional costs based on specific calculations\n            if (key === \"blower\") {\n                equipment.totalPrice += blowerCapacity * ensureNumber(equipment.costPerCapacity);\n            }\n            if (key === \"mbbr-media\") {\n                equipment.totalPrice += MBBRMedia * ensureNumber(equipment.costPerCapacity);\n            }\n            if (key === \"diffuser-course\") {\n                equipment.totalPrice += diffuserCourseCapacity * ensureNumber(equipment.costPerPiece);\n            }\n            if (key === \"diffuser-fine\") {\n                equipment.totalPrice += diffuserFineCapacity * ensureNumber(equipment.costPerPiece);\n            }\n            if (key === \"multi-grade-filter\") {\n                equipment.totalPrice += mgfCapacity * ensureNumber(equipment.costPerDiameter);\n            }\n            if (key === \"uv-system\") {\n                equipment.totalPrice += UVSystemFlow * ensureNumber(equipment.costPerFlow);\n            }\n            if (key === \"Ozonator\") {\n                equipment.totalPrice += OzonatorFlow * ensureNumber(equipment.costPerFlow);\n            }\n            if (key === \"ultra-filtration\") {\n                equipment.totalPrice += UltraFiltrationSystemFlow * ensureNumber(equipment.costPerFlow);\n            }\n            if (key === \"tube-media\") {\n                equipment.totalPrice += TubeDeck * ensureNumber(equipment.costPerCapacity);\n            }\n            if (key === \"flow-meter\") {\n                equipment.totalPrice += flowMeterSize * ensureNumber(equipment.costPerSize);\n            }\n        } else {\n            equipment.totalPrice = ensureNumber(equipment.costPerCapacity) * ensureNumber(equipment.quantity);\n        }\n    });\n    return updatedEquipmentData;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy91dGlscy9jYWxjdWxhdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkVBQTJFO0FBQzNFLE1BQU1BLGVBQWUsQ0FBQ0MsUUFBV0MsTUFBTUQsU0FBUyxJQUFJQTtBQUU3QyxTQUFTRSxtQkFBbUJDLGFBQWE7SUFDOUMsT0FBT0MsT0FBT0MsTUFBTSxDQUFDRixlQUFlRyxNQUFNLENBQUMsQ0FBQ0MsT0FBT0MsWUFBY0QsUUFBUUMsVUFBVUMsVUFBVSxFQUFFO0FBQ2pHO0FBRU8sU0FBU0Msa0JBQWtCQyxhQUFhO0lBQzdDLE9BQU9BLGdCQUFnQjtBQUN6QjtBQUVPLFNBQVNDLHdCQUF3QkMsUUFBUTtJQUM5QyxPQUFPQSxXQUFXO0FBQ3BCO0FBRU8sU0FBU0Msd0JBQXdCQyxHQUFHLEVBQUVKLGFBQWE7UUFBRUssUUFBQUEsaUVBQVE7SUFDbEUsT0FBTyxNQUFRLE9BQVFMLGdCQUFnQixNQUFPO0FBQ2hEO0FBRU8sU0FBU00seUJBQXlCQyxRQUFRLEVBQUVQLGFBQWE7UUFBRUssUUFBQUEsaUVBQVE7SUFDeEUsT0FBTyxXQUFhLE9BQVFMLGdCQUFnQixNQUFPO0FBQ3JEO0FBRU8sU0FBU1EsMkJBQTJCUixhQUFhLEVBQUVJLEdBQUcsRUFBRUssR0FBRztJQUNoRSxNQUFNQyxlQUFlLGdCQUFrQk4sQ0FBQUEsTUFBTSxPQUFPSyxNQUFNLEdBQUUsSUFBTTtJQUNsRSxPQUFPQyxlQUFlO0FBQ3hCO0FBRU8sU0FBU0MsbUJBQW1CUCxHQUFHLEVBQUVKLGFBQWE7SUFDbkQsT0FBTyxNQUFPQSxnQkFBaUI7QUFDakM7QUFFTyxTQUFTWSx3QkFBd0JDLGNBQWMsRUFBRUMsY0FBYyxFQUFFQyxlQUFlLEVBQUVDLGlCQUFpQjtJQUN4RyxPQUFPLGlCQUFrQixNQUFPRixpQkFBaUJDLGtCQUFtQkMsb0JBQW9CO0FBQzFGO0FBRU8sU0FBU0MsZ0NBQWdDSixjQUFjLEVBQUVHLGlCQUFpQjtJ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LFVBQVUsSUFBSXFDLFlBQVkvQyxhQUFhUyxVQUFVK0QsZUFBZTtZQUM1RTtZQUNBLElBQUlILFFBQVEsbUJBQW1CO2dCQUM3QjVELFVBQVVDLFVBQVUsSUFBSXVDLHlCQUF5QmpELGFBQWFTLFVBQVVrRSxZQUFZO1lBQ3RGO1lBQ0EsSUFBSU4sUUFBUSxpQkFBaUI7Z0JBQzNCNUQsVUFBVUMsVUFBVSxJQUFJd0MsdUJBQXVCbEQsYUFBYVMsVUFBVWtFLFlBQVk7WUFDcEY7WUFDQSxJQUFJTixRQUFRLHNCQUFzQjtnQkFDaEM1RCxVQUFVQyxVQUFVLElBQUl1QixjQUFjakMsYUFBYVMsVUFBVW1FLGVBQWU7WUFDOUU7WUFDQSxJQUFJUCxRQUFRLGFBQWE7Z0JBQ3ZCNUQsVUFBVUMsVUFBVSxJQUFJMEMsZUFBZXBELGFBQWFTLFVBQVVvRSxXQUFXO1lBQzNFO1lBQ0EsSUFBSVIsUUFBUSxZQUFZO2dCQUN0QjVELFVBQVVDLFVBQVUsSUFBSTJDLGVBQWVyRCxhQUFhUyxVQUFVb0UsV0FBVztZQUMzRTtZQUNBLElBQUlSLFFBQVEsb0JBQW9CO2dCQUM5QjVELFVBQVVDLFVBQVUsSUFBSTRDLDRCQUE0QnRELGFBQWFTLFVBQVVvRSxXQUFXO1lBQ3hGO1lBQ0EsSUFBSVIsUUFBUSxjQUFjO2dCQUN4QjVELFVBQVVDLFVBQVUsSUFBSTZDLFdBQVd2RCxhQUFhUyxVQUFVK0QsZUFBZTtZQUMzRTtZQUNBLElBQUlILFFBQVEsY0FBYztnQkFDeEI1RCxVQUFVQyxVQUFVLElBQUk4QyxnQkFBZ0J4RCxhQUFhUyxVQUFVcUUsV0FBVztZQUM1RTtRQUNGLE9BQU87WUFDTHJFLFVBQVVDLFVBQVUsR0FBR1YsYUFBYVMsVUFBVStELGVBQWUsSUFBSXhFLGFBQWFTLFVBQVVnRSxRQUFRO1FBQ2xHO0lBQ0Y7SUFFQSxPQUFPNUI7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvdXRpbHMvY2FsY3VsYXRpb25zLmpzP2NiNzMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGVuc3VyZSBhIG51bWJlciBpcyBub3QgTmFOLCByZXBsYWNpbmcgd2l0aCAwIGlmIGl0IGlzXHJcbmNvbnN0IGVuc3VyZU51bWJlciA9ICh2YWx1ZSkgPT4gKGlzTmFOKHZhbHVlKSA/IDAgOiB2YWx1ZSlcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVUb3RhbENvc3QoZXF1aXBtZW50RGF0YSkge1xyXG4gIHJldHVybiBPYmplY3QudmFsdWVzKGVxdWlwbWVudERhdGEpLnJlZHVjZSgodG90YWwsIGVxdWlwbWVudCkgPT4gdG90YWwgKyBlcXVpcG1lbnQudG90YWxQcmljZSwgMClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUZsb3dSYXRlKHBsYW50Q2FwYWNpdHkpIHtcclxuICByZXR1cm4gcGxhbnRDYXBhY2l0eSAvIDIwXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVFcXVpdmFsZW50VGFuayhmbG93UmF0ZSkge1xyXG4gIHJldHVybiBmbG93UmF0ZSAqIDhcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU1CQlJUYW5rVm9sdW1lKEJPRCwgcGxhbnRDYXBhY2l0eSwgZGVwdGggPSA0KSB7XHJcbiAgcmV0dXJuICgoQk9EIC8gMTAwMCkgKiBwbGFudENhcGFjaXR5ICogMi41KSAvIDAuODlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU5pdHJvZ2VuUmVtb3ZhbChOaXRyb2dlbiwgcGxhbnRDYXBhY2l0eSwgZGVwdGggPSA0KSB7XHJcbiAgcmV0dXJuICgoTml0cm9nZW4gLyAxMDAwKSAqIHBsYW50Q2FwYWNpdHkgKiA0LjMpIC8gMC44OVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlU2x1ZGdlSG9sZGluZ1RhbmsocGxhbnRDYXBhY2l0eSwgQk9ELCBUU1MpIHtcclxuICBjb25zdCBzbHVkZ2VIb2xkZXIgPSAocGxhbnRDYXBhY2l0eSAqIChCT0QgKiAwLjE1ICsgVFNTICogMC42KSkgLyAxMDAwMDBcclxuICByZXR1cm4gc2x1ZGdlSG9sZGVyICogNFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlTUJCUk1lZGlhKEJPRCwgcGxhbnRDYXBhY2l0eSkge1xyXG4gIHJldHVybiAoQk9EICogcGxhbnRDYXBhY2l0eSkgLyA0MDAwXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVCbG93ZXJDYXBhY2l0eShlcXVpdmFsZW50VGFuaywgTUJCUlRhbmtWb2x1bWUsIG5pdHJvZ2VuUmVtb3ZhbCwgc2x1ZGdlSG9sZGluZ1RhbmspIHtcclxuICByZXR1cm4gKGVxdWl2YWxlbnRUYW5rICogMC42KSArIE1CQlJUYW5rVm9sdW1lICsgbml0cm9nZW5SZW1vdmFsICsgKHNsdWRnZUhvbGRpbmdUYW5rICogMC42KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlRGlmZnVzZXJDb3Vyc2VDYXBhY2l0eShlcXVpdmFsZW50VGFuaywgc2x1ZGdlSG9sZGluZ1RhbmspIHtcclxuICByZXR1cm4gKChlcXVpdmFsZW50VGFuayAqIDAuNikgLyAzKSArICgoc2x1ZGdlSG9sZGluZ1RhbmsgKiAwLjYpIC8gMylcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZURpZmZ1c2VyRmluZUNhcGFjaXR5KE1CQlJUYW5rVm9sdW1lLCBuaXRyb2dlblJlbW92YWwpIHtcclxuICByZXR1cm4gKE1CQlJUYW5rVm9sdW1lICsgbml0cm9nZW5SZW1vdmFsKSAvIDVcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU1HRkNhcGFjaXR5KHBsYW50Q2FwYWNpdHkpIHtcclxuICByZXR1cm4gcGxhbnRDYXBhY2l0eSAvICgxNiAqIDEyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU1HRkRpYW1ldGVyKG1nZkNhcGFjaXR5KSB7XHJcbiAgcmV0dXJuIE1hdGguc3FydCgobWdmQ2FwYWNpdHkgKiA0KSAvIE1hdGguUEkpICogMTAwMDsgLy8gTXVsdGlwbHkgdGhlIHJlc3VsdCBieSAxMDAwXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVGbG93TWV0ZXJTaXplKHdhdGVyRmxvd1JhdGUpIHtcclxuICByZXR1cm4gTWF0aC5zcXJ0KCh3YXRlckZsb3dSYXRlICogNCkgLyAoMzYwMCAqIDEuNSAqIDMuMTQpKSAqIDEwMDBcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRpb25VVlN5c3RlbUZsb3dSYXRlKHBsYW50Q2FwYWNpdHkpIHtcclxuICByZXR1cm4gcGxhbnRDYXBhY2l0eSAvIDIwXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0aW9uT3pvbmF0b3JGbG93UmF0ZShwbGFudENhcGFjaXR5KSB7XHJcbiAgcmV0dXJuIChwbGFudENhcGFjaXR5ICogNSkgLyAyMFxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGlvblVsdHJhRmlsdHJhdGlvblN5c3RlbUZsb3dSYXRlKHBsYW50Q2FwYWNpdHkpIHtcclxuICByZXR1cm4gcGxhbnRDYXBhY2l0eSAvIDIwXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0aW9uVHViZURlY2tNZWRpYU51bWJlcihwbGFudENhcGFjaXR5KXtyZXR1cm4gcGxhbnRDYXBhY2l0eSAqIDIyLjVcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRHluYW1pY0NhcGFjaXRpZXMocGxhbnREYXRhLCBlcXVpcG1lbnREYXRhKSB7XHJcbiAgY29uc3QgdXBkYXRlZEVxdWlwbWVudERhdGEgPSB7IC4uLmVxdWlwbWVudERhdGEgfVxyXG5cclxuICBjb25zdCBmbG93UmF0ZSA9IGNhbGN1bGF0ZUZsb3dSYXRlKHBsYW50RGF0YS5jYXBhY2l0eSlcclxuICBjb25zdCBlcXVpdmFsZW50VGFuayA9IGNhbGN1bGF0ZUVxdWl2YWxlbnRUYW5rKGZsb3dSYXRlKVxyXG4gIGNvbnN0IE1CQlJUYW5rVm9sdW1lID0gY2FsY3VsYXRlTUJCUlRhbmtWb2x1bWUocGxhbnREYXRhLkJPRCwgcGxhbnREYXRhLmNhcGFjaXR5LCA0KVxyXG4gIGNvbnN0IG5pdHJvZ2VuUmVtb3ZhbCA9IGNhbGN1bGF0ZU5pdHJvZ2VuUmVtb3ZhbChwbGFudERhdGEuTml0cm9nZW4sIHBsYW50RGF0YS5jYXBhY2l0eSwgNClcclxuICBjb25zdCBzbHVkZ2VIb2xkaW5nVGFuayA9IGNhbGN1bGF0ZVNsdWRnZUhvbGRpbmdUYW5rKHBsYW50RGF0YS5jYXBhY2l0eSwgcGxhbnREYXRhLkJPRCwgcGxhbnREYXRhLlRTUylcclxuICBjb25zdCBNQkJSTWVkaWEgPSBjYWxjdWxhdGVNQkJSTWVkaWEocGxhbnREYXRhLkJPRCwgcGxhbnREYXRhLmNhcGFjaXR5KVxyXG4gIGNvbnN0IGJsb3dlckNhcGFjaXR5ID0gY2FsY3VsYXRlQmxvd2VyQ2FwYWNpdHkoZXF1aXZhbGVudFRhbmssIE1CQlJUYW5rVm9sdW1lLCBuaXRyb2dlblJlbW92YWwsIHNsdWRnZUhvbGRpbmdUYW5rKVxyXG4gIGNvbnN0IGRpZmZ1c2VyQ291cnNlQ2FwYWNpdHkgPSBjYWxjdWxhdGVEaWZmdXNlckNvdXJzZUNhcGFjaXR5KGVxdWl2YWxlbnRUYW5rLCBzbHVkZ2VIb2xkaW5nVGFuaylcclxuICBjb25zdCBkaWZmdXNlckZpbmVDYXBhY2l0eSA9IGNhbGN1bGF0ZURpZmZ1c2VyRmluZUNhcGFjaXR5KE1CQlJUYW5rVm9sdW1lLCBuaXRyb2dlblJlbW92YWwpXHJcbiAgY29uc3QgbWdmQ2FwYWNpdHkgPSBjYWxjdWxhdGVNR0ZDYXBhY2l0eShwbGFudERhdGEuY2FwYWNpdHkpXHJcbiAgY29uc3QgbWdmRGlhbWV0ZXIgPSBjYWxjdWxhdGVNR0ZEaWFtZXRlcihtZ2ZDYXBhY2l0eSlcclxuICBjb25zdCBVVlN5c3RlbUZsb3cgPSBjYWxjdWxhdGlvblVWU3lzdGVtRmxvd1JhdGUocGxhbnREYXRhLmNhcGFjaXR5KVxyXG4gIGNvbnN0IE96b25hdG9yRmxvdyA9IGNhbGN1bGF0aW9uT3pvbmF0b3JGbG93UmF0ZShwbGFudERhdGEuY2FwYWNpdHkpXHJcbiAgY29uc3QgVWx0cmFGaWx0cmF0aW9uU3lzdGVtRmxvdyA9IGNhbGN1bGF0aW9uVWx0cmFGaWx0cmF0aW9uU3lzdGVtRmxvd1JhdGUocGxhbnREYXRhLmNhcGFjaXR5KVxyXG4gIGNvbnN0IFR1YmVEZWNrID0gY2FsY3VsYXRpb25UdWJlRGVja01lZGlhTnVtYmVyKHBsYW50RGF0YS5jYXBhY2l0eSlcclxuICBjb25zdCBmbG93TWV0ZXJTaXplID0gY2FsY3VsYXRlRmxvd01ldGVyU2l6ZShmbG93UmF0ZSlcclxuXHJcbiAgaWYgKHVwZGF0ZWRFcXVpcG1lbnREYXRhW1wicmF3LXNld2FnZVwiXSkgdXBkYXRlZEVxdWlwbWVudERhdGFbXCJyYXctc2V3YWdlXCJdLmNhcGFjaXR5ID0gZmxvd1JhdGVcclxuICBpZiAodXBkYXRlZEVxdWlwbWVudERhdGFbXCJzbHVkZ2UtcHVtcFwiXSkgdXBkYXRlZEVxdWlwbWVudERhdGFbXCJzbHVkZ2UtcHVtcFwiXS5jYXBhY2l0eSA9IGZsb3dSYXRlXHJcbiAgaWYgKHVwZGF0ZWRFcXVpcG1lbnREYXRhW1wiZmlsdGVyLXB1bXBcIl0pIHVwZGF0ZWRFcXVpcG1lbnREYXRhW1wiZmlsdGVyLXB1bXBcIl0uY2FwYWNpdHkgPSBwbGFudERhdGEuY2FwYWNpdHkgLyAxNlxyXG4gIGlmICh1cGRhdGVkRXF1aXBtZW50RGF0YS5ibG93ZXIpIHVwZGF0ZWRFcXVpcG1lbnREYXRhLmJsb3dlci5jYXBhY2l0eSA9IGJsb3dlckNhcGFjaXR5XHJcbiAgaWYgKHVwZGF0ZWRFcXVpcG1lbnREYXRhW1wibWJici1tZWRpYVwiXSkgdXBkYXRlZEVxdWlwbWVudERhdGFbXCJtYmJyLW1lZGlhXCJdLlZvbHVtZSA9IE1CQlJNZWRpYVxyXG4gIGlmICh1cGRhdGVkRXF1aXBtZW50RGF0YVtcImRpZmZ1c2VyLWNvdXJzZVwiXSkgdXBkYXRlZEVxdWlwbWVudERhdGFbXCJkaWZmdXNlci1jb3Vyc2VcIl0uUGllY2UgPSBkaWZmdXNlckNvdXJzZVBpZWNlXHJcbiAgaWYgKHVwZGF0ZWRFcXVpcG1lbnREYXRhW1wiZGlmZnVzZXItZmluZVwiXSkgdXBkYXRlZEVxdWlwbWVudERhdGFbXCJkaWZmdXNlci1maW5lXCJdLlBpZWNlID0gZGlmZnVzZXJGaW5lUGllY2VcclxuICBpZiAodXBkYXRlZEVxdWlwbWVudERhdGFbXCJtdWx0aS1ncmFkZS1maWx0ZXJcIl0pdXBkYXRlZEVxdWlwbWVudERhdGFbXCJtdWx0aS1ncmFkZS1maWx0ZXJcIl0uZGlhbWV0ZXIuSGVpZ2h0ID0gbWdmRGlhbWV0ZXJIZWlnaHRcclxuICBpZiAodXBkYXRlZEVxdWlwbWVudERhdGFbXCJ1di1zeXN0ZW1cIl0pIHVwZGF0ZWRFcXVpcG1lbnREYXRhW1widXYtc3lzdGVtXCJdLkZsb3cgPSBVVlN5c3RlbUZsb3dcclxuICBpZiAodXBkYXRlZEVxdWlwbWVudERhdGFbXCJPem9uYXRvclwiXSl1cGRhdGVkRXF1aXBtZW50RGF0YVtcIk96b25hdG9yXCJdLkZsb3cgPSBPem9uYXRvckZsb3dcclxuICBpZiAodXBkYXRlZEVxdWlwbWVudERhdGFbXCJ1bHRyYS1maWx0cmF0aW9uXCJdKSB1cGRhdGVkRXF1aXBtZW50RGF0YVtcInVsdHJhLWZpbHRyYXRpb25cIl0uRmxvdyA9IFVsdHJhRmlsdHJhdGlvblN5c3RlbUZsb3dcclxuICBpZih1cGRhdGVkRXF1aXBtZW50RGF0YVtcInR1YmUtbWVkaWFcIl0pIHVwZGF0ZWRFcXVpcG1lbnREYXRhW1widHViZS1tZWRpYVwiXS5jYXBhY2l0eSA9IFR1YmVEZWNrXHJcbiAgaWYgKHVwZGF0ZWRFcXVpcG1lbnREYXRhW1wiZmxvdy1tZXRlclwiXSkgdXBkYXRlZEVxdWlwbWVudERhdGFbXCJmbG93LW1ldGVyXCJdLnNpemUgPSBmbG93TWV0ZXJTaXplXHJcblxyXG4gIE9iamVjdC5rZXlzKHVwZGF0ZWRFcXVpcG1lbnREYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgIGNvbnN0IGVxdWlwbWVudCA9IHVwZGF0ZWRFcXVpcG1lbnREYXRhW2tleV07XHJcbiAgICBpZiAoZXF1aXBtZW50LmNhcGFjaXR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgY29uc3QgY2FwYWNpdHlDb3N0ID0gZW5zdXJlTnVtYmVyKGVxdWlwbWVudC5jb3N0UGVyQ2FwYWNpdHkpICogZW5zdXJlTnVtYmVyKGVxdWlwbWVudC5xdWFudGl0eSk7XHJcbiAgICAgIGVxdWlwbWVudC50b3RhbFByaWNlID0gTWF0aC5tYXgoZW5zdXJlTnVtYmVyKGVxdWlwbWVudC5jYXBhY2l0eSksIDEpICogY2FwYWNpdHlDb3N0O1xyXG5cclxuICAgICAgLy8gQWRkIGFkZGl0aW9uYWwgY29zdHMgYmFzZWQgb24gc3BlY2lmaWMgY2FsY3VsYXRpb25zXHJcbiAgICAgIGlmIChrZXkgPT09IFwiYmxvd2VyXCIpIHtcclxuICAgICAgICBlcXVpcG1lbnQudG90YWxQcmljZSArPSBibG93ZXJDYXBhY2l0eSAqIGVuc3VyZU51bWJlcihlcXVpcG1lbnQuY29zdFBlckNhcGFjaXR5KTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoa2V5ID09PSBcIm1iYnItbWVkaWFcIikge1xyXG4gICAgICAgIGVxdWlwbWVudC50b3RhbFByaWNlICs9IE1CQlJNZWRpYSAqIGVuc3VyZU51bWJlcihlcXVpcG1lbnQuY29zdFBlckNhcGFjaXR5KTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoa2V5ID09PSBcImRpZmZ1c2VyLWNvdXJzZVwiKSB7XHJcbiAgICAgICAgZXF1aXBtZW50LnRvdGFsUHJpY2UgKz0gZGlmZnVzZXJDb3Vyc2VDYXBhY2l0eSAqIGVuc3VyZU51bWJlcihlcXVpcG1lbnQuY29zdFBlclBpZWNlKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoa2V5ID09PSBcImRpZmZ1c2VyLWZpbmVcIikge1xyXG4gICAgICAgIGVxdWlwbWVudC50b3RhbFByaWNlICs9IGRpZmZ1c2VyRmluZUNhcGFjaXR5ICogZW5zdXJlTnVtYmVyKGVxdWlwbWVudC5jb3N0UGVyUGllY2UpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChrZXkgPT09IFwibXVsdGktZ3JhZGUtZmlsdGVyXCIpIHtcclxuICAgICAgICBlcXVpcG1lbnQudG90YWxQcmljZSArPSBtZ2ZDYXBhY2l0eSAqIGVuc3VyZU51bWJlcihlcXVpcG1lbnQuY29zdFBlckRpYW1ldGVyKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoa2V5ID09PSBcInV2LXN5c3RlbVwiKSB7XHJcbiAgICAgICAgZXF1aXBtZW50LnRvdGFsUHJpY2UgKz0gVVZTeXN0ZW1GbG93ICogZW5zdXJlTnVtYmVyKGVxdWlwbWVudC5jb3N0UGVyRmxvdyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGtleSA9PT0gXCJPem9uYXRvclwiKSB7XHJcbiAgICAgICAgZXF1aXBtZW50LnRvdGFsUHJpY2UgKz0gT3pvbmF0b3JGbG93ICogZW5zdXJlTnVtYmVyKGVxdWlwbWVudC5jb3N0UGVyRmxvdyk7XHJcbiAgICAgIH0gXHJcbiAgICAgIGlmIChrZXkgPT09IFwidWx0cmEtZmlsdHJhdGlvblwiKSB7XHJcbiAgICAgICAgZXF1aXBtZW50LnRvdGFsUHJpY2UgKz0gVWx0cmFGaWx0cmF0aW9uU3lzdGVtRmxvdyAqIGVuc3VyZU51bWJlcihlcXVpcG1lbnQuY29zdFBlckZsb3cpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChrZXkgPT09IFwidHViZS1tZWRpYVwiKSB7XHJcbiAgICAgICAgZXF1aXBtZW50LnRvdGFsUHJpY2UgKz0gVHViZURlY2sgKiBlbnN1cmVOdW1iZXIoZXF1aXBtZW50LmNvc3RQZXJDYXBhY2l0eSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGtleSA9PT0gXCJmbG93LW1ldGVyXCIpIHtcclxuICAgICAgICBlcXVpcG1lbnQudG90YWxQcmljZSArPSBmbG93TWV0ZXJTaXplICogZW5zdXJlTnVtYmVyKGVxdWlwbWVudC5jb3N0UGVyU2l6ZSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVxdWlwbWVudC50b3RhbFByaWNlID0gZW5zdXJlTnVtYmVyKGVxdWlwbWVudC5jb3N0UGVyQ2FwYWNpdHkpICogZW5zdXJlTnVtYmVyKGVxdWlwbWVudC5xdWFudGl0eSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiB1cGRhdGVkRXF1aXBtZW50RGF0YTtcclxufVxyXG5cclxuIl0sIm5hbWVzIjpbImVuc3VyZU51bWJlciIsInZhbHVlIiwiaXNOYU4iLCJjYWxjdWxhdGVUb3RhbENvc3QiLCJlcXVpcG1lbnREYXRhIiwiT2JqZWN0IiwidmFsdWVzIiwicmVkdWNlIiwidG90YWwiLCJlcXVpcG1lbnQiLCJ0b3RhbFByaWNlIiwiY2FsY3VsYXRlRmxvd1JhdGUiLCJwbGFudENhcGFjaXR5IiwiY2FsY3VsYXRlRXF1aXZhbGVudFRhbmsiLCJmbG93UmF0ZSIsImNhbGN1bGF0ZU1CQlJUYW5rVm9sdW1lIiwiQk9EIiwiZGVwdGgiLCJjYWxjdWxhdGVOaXRyb2dlblJlbW92YWwiLCJOaXRyb2dlbiIsImNhbGN1bGF0ZVNsdWRnZUhvbGRpbmdUYW5rIiwiVFNTIiwic2x1ZGdlSG9sZGVyIiwiY2FsY3VsYXRlTUJCUk1lZGlhIiwiY2FsY3VsYXRlQmxvd2VyQ2FwYWNpdHkiLCJlcXVpdmFsZW50VGFuayIsIk1CQlJUYW5rVm9sdW1lIiwibml0cm9nZW5SZW1vdmFsIiwic2x1ZGdlSG9sZGluZ1RhbmsiLCJjYWxjdWxhdGVEaWZmdXNlckNvdXJzZUNhcGFjaXR5IiwiY2FsY3VsYXRlRGlmZnVzZXJGaW5lQ2FwYWNpdHkiLCJjYWxjdWxhdGVNR0ZDYXBhY2l0eSIsImNhbGN1bGF0ZU1HRkRpYW1ldGVyIiwibWdmQ2FwYWNpdHkiLCJNYXRoIiwic3FydCIsIlBJIiwiY2FsY3VsYXRlRmxvd01ldGVyU2l6ZSIsIndhdGVyRmxvd1JhdGUiLCJjYWxjdWxhdGlvblVWU3lzdGVtRmxvd1JhdGUiLCJjYWxjdWxhdGlvbk96b25hdG9yRmxvd1JhdGUiLCJjYWxjdWxhdGlvblVsdHJhRmlsdHJhdGlvblN5c3RlbUZsb3dSYXRlIiwiY2FsY3VsYXRpb25UdWJlRGVja01lZGlhTnVtYmVyIiwidXBkYXRlRHluYW1pY0NhcGFjaXRpZXMiLCJwbGFudERhdGEiLCJ1cGRhdGVkRXF1aXBtZW50RGF0YSIsImNhcGFjaXR5IiwiTUJCUk1lZGlhIiwiYmxvd2VyQ2FwYWNpdHkiLCJkaWZmdXNlckNvdXJzZUNhcGFjaXR5IiwiZGlmZnVzZXJGaW5lQ2FwYWNpdHkiLCJtZ2ZEaWFtZXRlciIsIlVWU3lzdGVtRmxvdyIsIk96b25hdG9yRmxvdyIsIlVsdHJhRmlsdHJhdGlvblN5c3RlbUZsb3ciLCJUdWJlRGVjayIsImZsb3dNZXRlclNpemUiLCJibG93ZXIiLCJWb2x1bWUiLCJQaWVjZSIsImRpZmZ1c2VyQ291cnNlUGllY2UiLCJkaWZmdXNlckZpbmVQaWVjZSIsImRpYW1ldGVyIiwiSGVpZ2h0IiwibWdmRGlhbWV0ZXJIZWlnaHQiLCJGbG93Iiwic2l6ZSIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwidW5kZWZpbmVkIiwiY2FwYWNpdHlDb3N0IiwiY29zdFBlckNhcGFjaXR5IiwicXVhbnRpdHkiLCJtYXgiLCJjb3N0UGVyUGllY2UiLCJjb3N0UGVyRGlhbWV0ZXIiLCJjb3N0UGVyRmxvdyIsImNvc3RQZXJTaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/calculations.js\n"));

/***/ })

});