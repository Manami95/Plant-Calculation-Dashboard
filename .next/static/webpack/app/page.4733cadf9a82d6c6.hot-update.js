"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/calculations.js":
/*!***********************************!*\
  !*** ./src/utils/calculations.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateBlowerCapacity: function() { return /* binding */ calculateBlowerCapacity; },\n/* harmony export */   calculateCarbonFilterDiameter: function() { return /* binding */ calculateCarbonFilterDiameter; },\n/* harmony export */   calculateDiffuserCoursePiece: function() { return /* binding */ calculateDiffuserCoursePiece; },\n/* harmony export */   calculateDiffuserFinePiece: function() { return /* binding */ calculateDiffuserFinePiece; },\n/* harmony export */   calculateEquivalentTank: function() { return /* binding */ calculateEquivalentTank; },\n/* harmony export */   calculateFlowMeterSize: function() { return /* binding */ calculateFlowMeterSize; },\n/* harmony export */   calculateFlowRate: function() { return /* binding */ calculateFlowRate; },\n/* harmony export */   calculateMBBRMedia: function() { return /* binding */ calculateMBBRMedia; },\n/* harmony export */   calculateMBBRTankVolume: function() { return /* binding */ calculateMBBRTankVolume; },\n/* harmony export */   calculateMGFCapacity: function() { return /* binding */ calculateMGFCapacity; },\n/* harmony export */   calculateMGFDiameter: function() { return /* binding */ calculateMGFDiameter; },\n/* harmony export */   calculateNitrogenRemoval: function() { return /* binding */ calculateNitrogenRemoval; },\n/* harmony export */   calculateSludgeHoldingTank: function() { return /* binding */ calculateSludgeHoldingTank; },\n/* harmony export */   calculateTotalCost: function() { return /* binding */ calculateTotalCost; },\n/* harmony export */   calculationOzonatorFlowRate: function() { return /* binding */ calculationOzonatorFlowRate; },\n/* harmony export */   calculationTubeDeckMediaNumber: function() { return /* binding */ calculationTubeDeckMediaNumber; },\n/* harmony export */   calculationUVSystemFlowRate: function() { return /* binding */ calculationUVSystemFlowRate; },\n/* harmony export */   calculationUltraFiltrationSystemFlowRate: function() { return /* binding */ calculationUltraFiltrationSystemFlowRate; },\n/* harmony export */   getBlowerTotalCost: function() { return /* binding */ getBlowerTotalCost; },\n/* harmony export */   initializeDashboard: function() { return /* binding */ initializeDashboard; },\n/* harmony export */   updateDynamicCapacities: function() { return /* binding */ updateDynamicCapacities; },\n/* harmony export */   updateEquipmentQuantity: function() { return /* binding */ updateEquipmentQuantity; }\n/* harmony export */ });\n// Helper function to ensure a number is not NaN, replacing with 0 if it is\nconst ensureNumber = (value)=>isNaN(value) ? 0 : value;\n// Function to save equipment data to local storage\nconst saveEquipmentData = (equipmentData)=>{\n    console.log(\"Saving equipment data to local storage:\", equipmentData); // Debugging\n    localStorage.setItem(\"equipmentData\", JSON.stringify(equipmentData));\n};\n// Function to load equipment data from local storage\nconst loadEquipmentData = ()=>{\n    const data = localStorage.getItem(\"equipmentData\");\n    console.log(\"Loaded equipment data from local storage:\", data); // Debugging\n    return data ? JSON.parse(data) : {};\n};\nfunction calculateTotalCost(equipmentData) {\n    return Object.values(equipmentData).reduce((total, equipment)=>total + equipment.totalPrice, 0);\n}\nfunction calculateFlowRate(plantCapacity) {\n    return plantCapacity / 20;\n}\nfunction calculateEquivalentTank(flowRate) {\n    return flowRate * 8;\n}\nfunction calculateMBBRTankVolume(BOD, plantCapacity) {\n    let depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 4;\n    return BOD / 1000 * plantCapacity * 2.5 / 0.89;\n}\nfunction calculateNitrogenRemoval(Nitrogen, plantCapacity) {\n    let depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 4;\n    return Nitrogen / 1000 * plantCapacity * 4.3 / 0.89;\n}\nfunction calculateSludgeHoldingTank(plantCapacity, BOD, TSS) {\n    const sludgeHolder = plantCapacity * (BOD * 0.15 + TSS * 0.6) / 100000;\n    return sludgeHolder * 4;\n}\nfunction calculateBlowerCapacity(equivalentTank, MBBRTankVolume, nitrogenRemoval, sludgeHoldingTank) {\n    return equivalentTank * 0.6 + MBBRTankVolume + nitrogenRemoval + sludgeHoldingTank * 0.6;\n}\nfunction getBlowerTotalCost(blowerCapacity) {\n    if (blowerCapacity >= 100) return 46392;\n    if (blowerCapacity >= 80) return 40533;\n    if (blowerCapacity >= 40) return 38165;\n    if (blowerCapacity >= 30) return 34157;\n    if (blowerCapacity >= 12) return 32874;\n    return 31081;\n}\nfunction calculateMBBRMedia(BOD, plantCapacity) {\n    return BOD * plantCapacity / 4000;\n}\nfunction calculateDiffuserCoursePiece(equivalentTank, sludgeHoldingTank) {\n    return equivalentTank * 0.6 / 3 + sludgeHoldingTank * 0.6 / 3;\n}\nfunction calculateDiffuserFinePiece(MBBRTankVolume, nitrogenRemoval) {\n    return (MBBRTankVolume + nitrogenRemoval) / 5;\n}\nfunction calculateMGFCapacity(plantCapacity) {\n    return plantCapacity / (16 * 12);\n}\nfunction calculateMGFDiameter(mgfCapacity) {\n    return Math.sqrt(mgfCapacity * 4 / Math.PI) * 1000; // Multiply the result by 1000\n}\nfunction calculateCarbonFilterDiameter(mgfCapacity) {\n    return Math.sqrt(mgfCapacity * 4 / Math.PI) * 1000; // Multiply the result by 1000\n}\nfunction calculateFlowMeterSize(waterFlowRate) {\n    return Math.sqrt(waterFlowRate * 4 / (3600 * 1.5 * 3.14)) * 1000;\n}\nfunction calculationUVSystemFlowRate(plantCapacity) {\n    return plantCapacity / 20;\n}\nfunction calculationOzonatorFlowRate(plantCapacity) {\n    return plantCapacity * 5 / 20;\n}\nfunction calculationUltraFiltrationSystemFlowRate(plantCapacity) {\n    return plantCapacity / 20;\n}\nfunction calculationTubeDeckMediaNumber(plantCapacity) {\n    return plantCapacity * 22.5;\n}\nfunction updateEquipmentQuantity(equipmentKey, newQuantity, equipmentData) {\n    const updatedEquipmentData = {\n        ...equipmentData\n    };\n    if (updatedEquipmentData[equipmentKey]) {\n        updatedEquipmentData[equipmentKey].quantity = ensureNumber(newQuantity);\n    }\n    // Recalculate the total prices after updating the quantity\n    return updateDynamicCapacities(updatedEquipmentData);\n}\nfunction updateDynamicCapacities(plantData, equipmentData) {\n    const updatedEquipmentData = {\n        ...equipmentData\n    };\n    const flowRate = calculateFlowRate(plantData.capacity);\n    const equivalentTank = calculateEquivalentTank(flowRate);\n    const MBBRTankVolume = calculateMBBRTankVolume(plantData.BOD, plantData.capacity, 4);\n    const nitrogenRemoval = calculateNitrogenRemoval(plantData.Nitrogen, plantData.capacity, 4);\n    const sludgeHoldingTank = calculateSludgeHoldingTank(plantData.capacity, plantData.BOD, plantData.TSS);\n    const MBBRMedia = calculateMBBRMedia(plantData.BOD, plantData.capacity);\n    const blowerCapacity = calculateBlowerCapacity(equivalentTank, MBBRTankVolume, nitrogenRemoval, sludgeHoldingTank);\n    // Update the blower data\n    if (updatedEquipmentData[\"blower\"]) {\n        updatedEquipmentData[\"blower\"].capacity = blowerCapacity; // Set the new capacity\n        updatedEquipmentData[\"blower\"].totalPrice = getBlowerTotalCost(blowerCapacity); // Update the total price based on the new capacity\n    }\n    const diffuserCoursePiece = Math.ceil(calculateDiffuserCoursePiece(equivalentTank, sludgeHoldingTank));\n    const diffuserFinePiece = Math.ceil(calculateDiffuserFinePiece(MBBRTankVolume, nitrogenRemoval));\n    const mgfCapacity = calculateMGFCapacity(plantData.capacity);\n    const mgfDiameter = calculateMGFDiameter(mgfCapacity);\n    const carbonFilterDiameter = calculateMGFDiameter(mgfCapacity);\n    const UVSystemFlow = calculationUVSystemFlowRate(plantData.capacity);\n    const OzonatorFlow = calculationOzonatorFlowRate(plantData.capacity);\n    const UltraFiltrationSystemFlow = calculationUltraFiltrationSystemFlowRate(plantData.capacity);\n    const TubeDeck = calculationTubeDeckMediaNumber(plantData.capacity);\n    const flowMeterSize = calculateFlowMeterSize(flowRate);\n    if (updatedEquipmentData[\"raw-sewage\"]) updatedEquipmentData[\"raw-sewage\"].capacity = flowRate;\n    if (updatedEquipmentData[\"blower\"]) {\n        updatedEquipmentData[\"blower\"].capacity = blowerCapacity;\n        updatedEquipmentData[\"blower\"].totalPrice = getBlowerTotalCost(blowerCapacity);\n    }\n    if (updatedEquipmentData[\"sludge-pump\"]) updatedEquipmentData[\"sludge-pump\"].capacity = flowRate;\n    if (updatedEquipmentData[\"filter-pump\"]) updatedEquipmentData[\"filter-pump\"].capacity = plantData.capacity / 16;\n    if (updatedEquipmentData[\"multi-grade-filter\"]) updatedEquipmentData[\"multi-grade-filter\"].diameter = mgfDiameter;\n    if (updatedEquipmentData[\"carbon-filter\"]) updatedEquipmentData[\"carbon-filter\"].diameter = carbonFilterDiameter;\n    if (updatedEquipmentData[\"tube-media\"]) updatedEquipmentData[\"tube-media\"].capacity = TubeDeck;\n    if (updatedEquipmentData[\"mbbr-media\"]) updatedEquipmentData[\"mbbr-media\"].Volume = MBBRMedia;\n    if (updatedEquipmentData[\"diffuser-course\"]) updatedEquipmentData[\"diffuser-course\"].Piece = diffuserCoursePiece;\n    if (updatedEquipmentData[\"diffuser-fine\"]) updatedEquipmentData[\"diffuser-fine\"].Piece = diffuserFinePiece;\n    if (updatedEquipmentData[\"flow-meter\"]) updatedEquipmentData[\"flow-meter\"].size = flowMeterSize;\n    if (updatedEquipmentData[\"uv-system\"]) updatedEquipmentData[\"uv-system\"].Flow = UVSystemFlow;\n    if (updatedEquipmentData[\"Ozonator\"]) updatedEquipmentData[\"Ozonator\"].Flow = OzonatorFlow;\n    if (updatedEquipmentData[\"ultra-filtration\"]) updatedEquipmentData[\"ultra-filtration\"].Flow = UltraFiltrationSystemFlow;\n    if (updatedEquipmentData[\"piping\"]) updatedEquipmentData[\"piping\"].totalPrice = 80000;\n    if (updatedEquipmentData[\"cable\"]) updatedEquipmentData[\"cable\"].totalPrice = 35000;\n    if (updatedEquipmentData[\"panel\"]) updatedEquipmentData[\"panel\"].totalPrice = 70000;\n    if (updatedEquipmentData[\"installation\"]) updatedEquipmentData[\"installation\"].totalPrice = 40000;\n    if (updatedEquipmentData[\"commissioning\"]) updatedEquipmentData[\"commissioning\"].totalPrice = 70000;\n    Object.keys(updatedEquipmentData).forEach((key)=>{\n        const equipment = updatedEquipmentData[key];\n        // Initialize totalPrice to zero\n        equipment.totalPrice = 0;\n        // Calculate total price based on cost factors\n        const capacityCost = ensureNumber(equipment.costPerCapacity) * ensureNumber(equipment.quantity);\n        const volumeCost = ensureNumber(equipment.costPerVolume) * ensureNumber(equipment.Volume || 0);\n        const flowCost = ensureNumber(equipment.costPerFlow) * ensureNumber(equipment.Flow || 0);\n        // Handle diffuser-course and diffuser-fine piece values\n        let pieceCount = ensureNumber(equipment.Piece || 0);\n        if (key === \"diffuser-course\" || key === \"diffuser-fine\") {\n            pieceCount = Math.ceil(pieceCount); // Round up to the nearest whole number\n        }\n        // Use the rounded piece count\n        const pieceCost = ensureNumber(equipment.costPerPiece) * pieceCount;\n        const diameterCost = ensureNumber(equipment.costPerDiameter) * ensureNumber(equipment.diameter || 0);\n        const sizeCost = ensureNumber(equipment.costPerSize) * ensureNumber(equipment.size || 0);\n        const quantityCost = ensureNumber(equipment.totalPrice) * ensureNumber(equipment.quantity || 0);\n        equipment.totalPrice += capacityCost + volumeCost + flowCost + pieceCost + diameterCost + sizeCost + quantityCost;\n        // Add additional costs based on specific calculations\n        switch(key){\n            case \"raw-sewage\":\n                equipment.totalPrice += flowRate * ensureNumber(equipment.costPerCapacity);\n                break;\n            case \"blower\":\n                equipment.totalPrice += blowerCapacity * ensureNumber(equipment.costPerCapacity);\n                break;\n            case \"sludge-pump\":\n                equipment.totalPrice += flowRate * ensureNumber(equipment.costPerCapacity);\n                break;\n            case \"filter-pump\":\n                equipment.totalPrice += plantData.capacity / 16 * ensureNumber(equipment.costPerCapacity);\n                break;\n            case \"multi-grade-filter\":\n                equipment.totalPrice += mgfCapacity * ensureNumber(equipment.costPerDiameter);\n                break;\n            case \"carbon-filter\":\n                equipment.totalPrice += mgfDiameter * ensureNumber(equipment.costPerDiameter);\n                break;\n            case \"tube-media\":\n                equipment.totalPrice += TubeDeck * ensureNumber(equipment.costPerCapacity);\n                break;\n            case \"mbbr-media\":\n                equipment.totalPrice += MBBRMedia * ensureNumber(equipment.costPerVolume);\n                break;\n            case \"diffuser-course\":\n                equipment.totalPrice += diffuserCoursePiece * ensureNumber(equipment.costPerPiece);\n                break;\n            case \"diffuser-fine\":\n                equipment.totalPrice += diffuserFinePiece * ensureNumber(equipment.costPerPiece);\n                break;\n            case \"flow-meter\":\n                equipment.totalPrice += flowMeterSize * ensureNumber(equipment.costPerSize);\n                break;\n            case \"uv-system\":\n                equipment.totalPrice += UVSystemFlow * ensureNumber(equipment.costPerFlow);\n                break;\n            case \"ozonator\":\n                equipment.totalPrice += OzonatorFlow * ensureNumber(equipment.costPerFlow);\n                break;\n            case \"ultra-filtration\":\n                equipment.totalPrice += UltraFiltrationSystemFlow * ensureNumber(equipment.costPerFlow);\n                break;\n            case \"piping\":\n                equipment.totalPrice += 80000; // Fixed cost for piping\n                break;\n            case \"cable\":\n                equipment.totalPrice += 35000; // Fixed cost for cable\n                break;\n            case \"panel\":\n                equipment.totalPrice += 70000; // Fixed cost for panel\n                break;\n            case \"installation\":\n                equipment.totalPrice += 40000; // Fixed cost for installation\n                break;\n            case \"commissioning\":\n                equipment.totalPrice += 70000; // Fixed cost for commissioning\n                break;\n        }\n    });\n    saveEquipmentData(updatedEquipmentData);\n    return updatedEquipmentData; // Return the updated equipment data\n}\n// Function to initialize the dashboard\nfunction initializeDashboard() {\n    let equipmentData = loadEquipmentData();\n    if (Object.keys(equipmentData).length === 0) {\n        equipmentData = equipmentInitialState; // Fallback to initial state\n        saveEquipmentData(equipmentData); // Save initial state to local storage\n    }\n    console.log(\"Initializing dashboard with equipment data:\", equipmentData); // Debugging\n    return equipmentData; // Use this data to populate your dashboard\n}\n// Example of how to handle quantity changes in the UI\nconst handleQuantityChange = (equipmentKey, newQuantity)=>{\n    const updatedEquipmentData = updateEquipmentQuantity(equipmentKey, newQuantity, loadEquipmentData());\n    // Optionally, re-render the dashboard or summary\n    renderDashboard(updatedEquipmentData);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/calculations.js\n"));

/***/ })

});